## 开发自己的 github action ： https://juejin.cn/post/6870372475188969479
# 使用教程 ：https://docs.github.com/cn/actions 和 环境变量等：https://wangchujiang.com/github-actions/ 其他ci迁移https://docs.github.com/cn/actions/migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions
# 插件的市场地址：https://github.com/marketplace?type=actions
# 教程地址：https://www.imooc.com/article/322530
# 同步到腾讯oss ： https://github.com/marketplace/actions/tencent-cos-action 和 https://github.com/marketplace/actions/tencent-cloudbase-github-action
# 同步到阿里云oss ： https://henryme.com/2022/06/hexo-cd-with-github-action-efea902f4b8a.html#%E5%AE%9E%E7%8E%B0-push-%E6%97%B6%E5%8F%91%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91
# 发布到maven仓库：https://blog.csdn.net/isea533/article/details/123962397 和 https://young-flash.github.io/2022/03/11/%E9%80%9A%E8%BF%87%20GitHub%20Action%20%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%20Maven%20%E5%8C%85%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/
# 发布npm包 ： https://zhuanlan.zhihu.com/p/494193833 和 https://www.cnblogs.com/wangyang0210/p/16645158.html
# rust包 : https://learnku.com/rust/t/68512

# 多平台构建 ： https://lisz.me/tech/docker/github-action.html
# 同步到腾讯coding ： https://cloud.tencent.com/developer/article/1798369 和 https://zhuanlan.zhihu.com/p/504859297
# 推送镜像 : https://frederick-s.github.io/2021/12/26/build-and-push-docker-image-to-docker-hub-with-github-actions/ 和 https://devpress.csdn.net/cloudnative/62f521857e6682346618a17f.html
#           https://twbhub.com/post/github-actions_publish_images/  和 https://juejin.cn/post/7052889711618031624
# 部署spring cloud项目 : https://segmentfault.com/a/1190000041682730 和 https://github.com/sudojia/actions-deploy-springboot/blob/master/.github/workflows/main.yml
#                       https://www.springcloud.io/post/2022-08/springcloud-github-actions/#gsc.tab=0
# 亚马逊云 ： https://learn.microsoft.com/en-us/azure/spring-apps/how-to-github-actions?pivots=programming-language-java
# 谷歌 ： https://lazyinwork.com/2022/07/23/push-image-to-gcr-using-github-action/

# 同步到vps ： https://newzone.top/deploy/Static.html#%E5%90%8C%E6%AD%A5%E5%88%B0-ftp 和 https://www.jianshu.com/p/c26524472998 以及 https://dev.to/lencx/05-tauri-ru-men-pian-kua-ping-tai-bian-yi-1h4d

# 生成Release ： https://blog.csdn.net/pfourfire/article/details/125002425 和 https://cloud.tencent.com/developer/article/1970730 以及 https://zhuanlan.zhihu.com/p/470866199
# flutter ： https://coldstone.fun/post/2020/02/26/flutter-github-actions/
# ios : https://www.jianshu.com/p/6973839bcab0 和 https://docs.taro.zone/blog
# pyqt：windows: https://blog.996workers.icu/archives/shi-yong-githubaction-jie-he-pyinstaller-ba-python-zi-dong-da-bao-cheng-exe-ying-yong
# go 多平台打包 ： https://ameow.xyz/archives/go-multiplatform-docker
# 前端 nodejs:https://juejin.cn/post/7055567512292818951
#     reactjs : https://zhuanlan.zhihu.com/p/542170190 和 https://segmentfault.com/a/1190000041449997
#     vuejs : https://juejin.cn/post/7075734060428951559

# k8s : https://llli.icu/blogs/%E5%85%B6%E4%BB%96/2022/0319.html#%E7%BC%96%E5%86%99action%E6%96%87%E4%BB%B6
# 证书申请 ： https://blog.men.ci/ssl-with-github-actions/
# 自签名证书：https://soulteary.com/2022/10/22/make-docker-tools-image-with-only-3md-self-signed-certificate-certs-maker.html
name: blog-ci # 使用规则：https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet\
on:
  label:
    types: [created, edited]
  push:
    branches:
      #  - main
      - master
    # paths:
    #  - "sub-project/**"
    #  - "!sub-project/docs/**" # ! 字符来指示应排除哪些路径。
    paths-ignore: # 包含和忽略只能二选一
      - "docs/**"
      - "generated.txt" # 忽略通知更新的操作不触发。
  workflow_dispatch: # 配置参数手动触发：https://blog.hszofficial.site/introduce/2020/11/30/%E4%BD%BF%E7%94%A8GithubActions%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81/
  schedule:
    # Runs everyday at 8:00 AM [ 0 8 * * *] # 参考 https://blog.csdn.net/Ximerr/article/details/123501772
    # Settings --> Branches 【生效必须把默认分支设置成工作流所在的分支，时间是UTC时间，中国时间加8】
    - cron: "0 0 * * *"
env:
  TEST_ENV: sdfdsfd
  # GITHUB_USER_NAME: your_github_id # your github id
  # GITHUB_USER_EMAIL: your_email_addr # your email address
# CI官网教程 https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
jobs: # docker https://nova.moe/accelerate-multi-arch-build-on-github-actions/ 前端 https://bbs.huaweicloud.com/blogs/337454
  build-and-deploy:
    runs-on: ubuntu-latest
    # if: "contains(github.event.head_commit.message, '[build]')" # 只有git message中包含[build]才触发构建，否则跳过
    #if: "! contains(github.event.head_commit.message, 'wip')"
    # if: github.event.repository.owner.id == github.event.sender.id # 自己star启动
    # if: github.event.schedule != '30 5 * * 1,3'
    steps:
      - name: 克隆代码
        uses: actions/checkout@v3 # 官网 https://github.com/actions/checkout
        with:
          submodules: true # 下载出子项目
          fetch-depth: 0 # 目录层级
      - name: 打包目录做md5 # https://www.z1987.com/blog/detail/f9e91ec51d1492d18d249636919154cc
        run: |
          tar -c content/ | gzip -n > content.tar.gz
          mkdir -p staging
          md5sum content.tar.gz | awk '{print $1}' > staging/md5.txt
      - name: 上传制品 # 可以在其他job下下载共享
        uses: actions/upload-artifact@v3 # https://docs.github.com/cn/actions/using-workflows/storing-workflow-data-as-artifacts
        with:
          name: comm-artifact
          path: |
            staging
            !staging/**/*.md
          #retention-days: 15 # 设置 5 天的自定义保留期
      - name: 安装Hugo环境
        uses: peaceiris/actions-hugo@v2 # https://github.com/peaceiris/actions-hugo
        with:
          hugo-version: "latest"
          extended: true # 支持扩展包
      - name: 构建Hugo网站
        # run: hugo
        run: hugo --minify
      - name: 部署静态-GitHub
        uses: peaceiris/actions-gh-pages@v3 # https://github.com/peaceiris/actions-gh-pages
        with:
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          EXTERNAL_REPOSITORY: mpv945/xiehaijun-blog
          PUBLISH_BRANCH: main
          PUBLISH_DIR: ./public
          force_orphan: true
          CNAME: www.ewancle.com
          commit_message: ${{ github.event.head_commit.message }}
  async-gitee:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: 同步GitHub资源到Gitee
        uses: wearerequired/git-mirror-action@master # https://github.com/wearerequired/git-mirror-action
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}
        with:
          # 默认推送在 main分支，不知是不是和上面配置有关海斯和source-repo的默认分支匹配。待确认
          source-repo: git@github.com:mpv945/xiehaijun-blog.git
          #destination-repo: git@gitee.com:mpv945/xiehaijun-blog.git
          destination-repo: git@gitee.com:mpv945/mpv945.git
      - name: Gitee部署Pages
        uses: yanglbme/gitee-pages-action@main # https://gitee.com/yanglbme/gitee-pages-action
        with:
          gitee-username: mpv945
          gitee-password: ${{ secrets.GITEE_PASSWORD }}
          gitee-repo: mpv945/mpv945
          # 指定page页使用哪个分支
          branch: main
          https: true
  run-python: # https://www.csdn.net/tags/MtTaMg0sMTk3MTcwLWJsb2cO0O0O.html
    runs-on: ubuntu-latest
    needs: async-gitee
    steps:
      - uses: actions/checkout@v3
        #run: |
        #  mkdir /home/runner/.cache/pip

      - name: 安装Python
        uses: actions/setup-python@v4 # https://github.com/actions/setup-python
        with:
          python-version: "2.7"
          check-latest: true
          #cache: "pip" # 需要在根目录存在：**/requirements.txt，或者下面配置手动指定
          #cache-dependency-path: '**/requirements-dev.txt'
          #update-environment: true
      - run: python --version
      - name: 开启缓存
        id: cache-python
        uses: actions/cache@v3
        env:
          cache-name: cache-python-modules
        with:
          path: ~/.cache/pip
          #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: | # 允许您指定在缓存未命中时使用的备用还原键列表key
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: 安装模块
        run: | # apt install wget -y
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt
          pip install requests
          ls -all
      - name: 判断文件是否存在
        id: check_files
        uses: andstor/file-existence-action@v2 # https://github.com/marketplace/actions/file-existence
        with:
          # files: "package.json, LICENSE, README.md"
          files: "/home/runner/.cache/pip/su-python-sdk.tar.gz"
      - name: 不存在下载sdk
        if: steps.check_files.outputs.files_exists != 'true'
        # if: ${{ env.DAY_OF_WEEK == 'Monday' }}
        run: | # 或者使用step下载文件：suisei-cn/actions-download-file@v1
          wget http://bj.bcebos.com/v1/yunjiasu-online/su-python-sdk-1.0.tar.gz?authorization=bce-auth-v1%2Ff186f4ec49a342aabe65ec0654d5c762%2F2019-12-02T06%3A43%3A44Z%2F-1%2F%2Fde8d8e6389a9b208b6da5a817deea8b8012da982449d4921b9afe53d6839fc3a -O /home/runner/.cache/pip/su-python-sdk.tar.gz
      - name: 运行py程序  # 运行api接口程序：python python/purge_cdn_cache.py
        #shell: bash
        env:
          BAIDU_SU_ACCESS_KEY: ${{ secrets.BAIDU_SU_ACCESS_KEY }}
          BAIDU_SU_SECRET_KEY: ${{ secrets.BAIDU_SU_SECRET_KEY }}
          BLOG_DOMAIN: ${{ secrets.BLOG_DOMAIN }}
        run: |
          if test -f "/home/runner/.cache/pip/su-python-sdk.tar.gz"; then
            echo '文件存在'
          else
            echo '文件不存在'
          fi
          export TZ='Asia/Shanghai'
          ls -all /home/runner/.cache/pip/
          pip install /home/runner/.cache/pip/su-python-sdk.tar.gz
          
      # - name: 暂存提交
      #   env:
      #     NAME: merrycodes
      #     EMAIL: merrycodes@163.com
      #   run: |
      #     git config --global user.name "$NAME"
      #     git config --global user.email "$EMAIL"
      #     export TZ='Asia/Shanghai'
      #     git add .
      #     git commit -m "update" -a
      # - name: 推送
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.TOKEN }}
      #     branch: main # branch: ${{ github.ref }}
  # 忽略和多版本：https://github.com/actions/setup-java/blob/main/.github/workflows/build.yml
  run-java: # https://github.com/merrycodes/Office-E5/blob/main/.github/workflows/main.yml
    needs: async-gitee # 多语言编译测试：https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
    strategy: # 运行策略
      fail-fast: false
      matrix: # 多环境下，每个都运行
        os: [ubuntu-latest] # [macos-latest, ubuntu-latest, windows-latest]
        java: ['8'] #[ '8', '11', '17' ]
        # exclude:
        #   - os: macos-latest
        #     python-version: '3.8'
        #   - os: windows-latest
        #     python-version: '3.6'
    #runs-on: ubuntu-latest # runs-on: windows-latest 或者 runs-on: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: 安装Java环境${{ matrix.java }}
        uses: actions/setup-java@v3 # https://github.com/actions/setup-java
        with:
          # java-version: "17" # versions: 8, 11, 16, 17
          java-version: ${{ matrix.java }}
          check-latest: true
          distribution: "temurin" # 发行版：temurin zulu adopt  adopt-openj9  liberica  microsoft  corretto
          architecture: x64 # x86 # optional - defaults to x64
          java-package: jdk # optional (jdk or jre) - defaults to jdk
          # cache: maven # actions/cache@v1 缓存组件
      - run: java -version
      - run: mvn -v
      - name: 开启缓存
        id: cache-java
        uses: actions/cache@v3 # 使用 https://docs.github.com/cn/actions/using-workflows/caching-dependencies-to-speed-up-workflows
        env:
          cache-name: cache-java-modules
        with:
          path: ~/.m2/repository
          #key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: | # 允许您指定在缓存未命中时使用的备用还原键列表key
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: 编译并运行项目
        env:
          BAIDU_SU_ACCESS_KEY: ${{ secrets.BAIDU_SU_ACCESS_KEY }}
          BAIDU_SU_SECRET_KEY: ${{ secrets.BAIDU_SU_SECRET_KEY }}
          BLOG_DOMAIN: ${{ secrets.BLOG_DOMAIN }}
        # 运行api接口程序：java -jar java/github-actions/target/github-actions-0.0.1-SNAPSHOT.jar
        run: | # cd java/github-actions # maven指定仓库：-Dmaven.repo.local=/home/juven/ci/foo-repo/
          export TZ='Asia/Shanghai'
          mvn -B clean package --file java/github-actions/pom.xml -Dmaven.test.skip=true -Dcheckstyle.skip=true
          ls java/github-actions/target/
          
          mkdir staging && cp java/github-actions/target/*.jar staging/
      # 发布Packages 官网教程：https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven
      - name: Publish to GitHub Packages # 发布到maven服务：https://juejin.cn/post/7102428103196016671
        run:  mvn --batch-mode deploy --file java/github-actions/pom.xml -Dmaven.test.skip=true # -Prelease-github
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # pom要配置 distributionManagement
      #- run: java -cp java HelloWorldApp
      # - name: Set up Scala 2.13.2
      #   run: |
      #     wget https://downloads.lightbend.com/scala/2.13.2/scala-2.13.2.deb
      #     sudo dpkg -i scala-2.13.2.deb && sudo apt install -f
      #     scala --version
      # - name: mvn package
      #   run: |
      #     mvn --batch-mode --update-snapshots verify
      #     mvn --batch-mode --update-snapshots package
      #     mkdir staging && cp target/*.jar staging
      # - name: 上传制品 # 可以在其他job下下载共享
      #   uses: actions/upload-artifact@v3 # https://docs.github.com/cn/actions/using-workflows/storing-workflow-data-as-artifacts
      #   with:
      #     name: baidu-su-artifact
      #     path: |
      #       staging
      #       !staging/**/*.md
      #     retention-days: 15 # 设置 5 天的自定义保留期
      # - name: 发布到GitHub-Packages
      # # docker 发布：https://docs.github.com/cn/actions/publishing-packages/publishing-docker-images 和 https://www.modb.pro/db/180592
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      #   run: mvn --batch-mode deploy
      # - name: Run jar
      #   env:
      #     CLIENT_ID: ${{ secrets.CLIENT_ID }}
      #     CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      #   run: |
      #     java -jar ./officeE5-1.0-SNAPSHOT-jar-with-dependencies.jar "$CLIENT_ID" "$USERNAME" "$PASSWORD" "$TENANT_GUID" "$CLIENT_SECRET"  >> ./run.log
      #     tail run.log
  # run-success-notifications: 
  #   runs-on: ubuntu-latest
  #   needs: [run-python, run-java]
  #   steps:
  #     - uses: actions/checkout@v3 
  #       with:
  #         #ref: ${{ github.head_ref }}
  #         ref: success-notifications # 拉取成功推送的分支
  #         fetch-depth: 0
  #     - name: 提交新的文件
  #       env:
  #         NAME: mpv945
  #         EMAIL: zhenxindefeng@126.com
  #       run: |
  #         TZ=Asia/Shanghai date "+%Y-%m-%d-%H_%M_%S-%A" > success-status.txt
  #         git config --local user.email "$EMAIL"
  #         git config --local user.name "$NAME"
  #         git add .
  #         git commit -a -m "新的构建于：$(TZ=Asia/Shanghai date "+%Y-%m-%d-%H_%M_%S-%A")"
  #     - name: 推送改变到远程
  #       uses: ad-m/github-push-action@master # 打标签，提交新的：https://github.com/ad-m/github-push-action
  #       with:
  #         github_token: ${{ secrets.PERSONAL_TOKEN }}
  #         #branch: ${{ github.ref }}
  #         branch: success-notifications
  # https://www.geeksforgeeks.org/automated-release-for-android-using-github-actions/
  # https://juejin.cn/post/7055958932933574669 和 https://blog.csdn.net/qq_41091006/article/details/124703709
  # https://www.sipios.com/blog-tech/tips-for-creating-stunning-software-releases-automatically
  # release: # https://cloud.tencent.com/developer/article/1970730 https://blog.csdn.net/pfourfire/article/details/125002425
  # 发布网站 ：https://github.com/uiwjs/react-codemirror/blob/b5d3f38da625d7c0187e3380201b5eb751598c8b/.github/workflows/ci.yml#L1-L90
  #   name: Release GitHub Actions 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: technote-space/release-github-actions@v6
  run-release: 
    runs-on: ubuntu-latest
    needs: [run-python, run-java]
    steps:
      - run: mkdir -p build
      - name: 下载工作件的内容
        uses: actions/download-artifact@v3
        with:
          name: comm-artifact
      - shell: bash
        run: |
          cat ./md5.txt
          cp ./md5.txt build/
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2 # 参考 https://github.com/p4gefau1t/trojan-go/blob/master/.github/workflows/release-build.yml
        with:
          repo_token: ${{ secrets.PERSONAL_TOKEN }}
          file: ./md5.txt
          asset_name: md5
          tag: ${{ github.ref }}
          overwrite: true
          body: "测试发布"
          # 多语言 https://github.com/svenstaro/upload-release-action
          # repo_token: ${{ secrets.GITHUB_TOKEN }}
          # file: target/release/${{ matrix.artifact_name }}
          # asset_name: ${{ matrix.asset_name }}
          # tag: ${{ github.ref }}
      # - name: 贡献者列表图片生成 # https://github.com/jaywcjlove/github-action-contributors
      #   uses: jaywcjlove/github-action-contributors@main
      #   with:
      #     filter-author: (renovate\[bot\]|renovate-bot|dependabot\[bot\])
      #     output: build/CONTRIBUTORS.svg
      #     avatarSize: 42
      # - name: 创建git的tag标签
      #   id: create_tag
      #   uses: jaywcjlove/create-tag-action@main
      #   with:
      #     #package-path: ./package.json # 根据文件是否修改，生成新的tag
      #     package-path: ./md5.txt
      #     token: ${{secrets.PERSONAL_TOKEN}} # 要有创建tag的权限，
      #     # test: '[R|r]elease[d]\s+[v|V]\d(\.\d+){0,2}' # 根据提交命令来获取
      # - name: Deploy贡献者列表图片到Page
      #   uses: peaceiris/actions-gh-pages@v3 # 图片地址：https://mpv945.github.io/项目名/CONTRIBUTORS.svg，放到自己项目下，和上面不一样
      #   with:
      #     github_token: ${{ secrets.PERSONAL_TOKEN }}
      #     publish_dir: ./build
      #     commit_message: ${{steps.tag_version.outputs.tag}} ${{ github.event.head_commit.message }}
      # - name: 生成更新日志
      #   id: changelog
      #   uses: jaywcjlove/changelog-generator@main
      #   if: steps.create_tag.outputs.successful
      #   with:
      #     head-ref: ${{steps.create_tag.outputs.version}}
      #     filter-author: (jaywcjlove|小弟调调™|dependabot\[bot\]|Renovate Bot)
      #     filter: (^[\s]+?[R|r]elease)|(^[R|r]elease)
      # - name: Create Release
      #   uses: ncipollo/release-action@v1 # 参考 https://github.com/uiwjs/react-codemirror/blob/b5d3f38da625d7c0187e3380201b5eb751598c8b/.github/workflows/ci.yml#L1-L90
      #   if: steps.create_tag.outputs.successful
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     name: ${{ steps.create_tag.outputs.version }}
      #     tag: ${{ steps.create_tag.outputs.version }}
      #     body: |
      #       ```bash
      #       npm i @uiw/react-heat-map@${{steps.create_tag.outputs.versionNumber}}
      #       ```
      #       ${{ steps.changelog.outputs.compareurl }}
      #       ${{ steps.changelog.outputs.changelog }}
  # 微信通知 https://github.com/marketplace/actions/github-action-for-wechat-work
  # k8s https://blog.csdn.net/u012803274/article/details/115839349
